import { UrlSource } from '../services/UrlAnalysisService';

export interface UrlMetadata {
  title?: string;
  description?: string;
  image?: string;
  source?: UrlSource;
  tags?: string[];
}

export class Url {
  constructor(
    public readonly id: string,
    public readonly url: string,
    public readonly metadata: UrlMetadata,
    public readonly createdAt: Date
  ) {
    this.validateUrl(url);
  }

  private validateUrl(url: string): void {
    if (!url || url.trim().length === 0) {
      throw new Error('URL cannot be empty');
    }

    try {
      new URL(url);
    } catch {
      throw new Error('Invalid URL format');
    }
  }

  static create(url: string, metadata: UrlMetadata = {}): Url {
    return new Url(
      '', // ID will be generated by repository
      url,
      metadata,
      new Date()
    );
  }

  updateMetadata(metadata: UrlMetadata): Url {
    return new Url(
      this.id,
      this.url,
      { ...this.metadata, ...metadata },
      this.createdAt
    );
  }

  addTag(tag: string): Url {
    const currentTags = this.metadata.tags || [];
    if (!currentTags.includes(tag)) {
      const updatedMetadata = {
        ...this.metadata,
        tags: [...currentTags, tag]
      };
      return this.updateMetadata(updatedMetadata);
    }
    return this;
  }

  removeTag(tag: string): Url {
    const currentTags = this.metadata.tags || [];
    const updatedTags = currentTags.filter(t => t !== tag);
    const updatedMetadata = {
      ...this.metadata,
      tags: updatedTags
    };
    return this.updateMetadata(updatedMetadata);
  }
} 