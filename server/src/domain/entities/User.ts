export interface UserData {
  email: string;
  name: string;
  picture?: string;
  lastLoginAt: Date;
}

export class User {
  constructor(
    public readonly id: string,
    public readonly email: string,
    public readonly name: string,
    public readonly picture: string | undefined,
    public readonly lastLoginAt: Date,
    public readonly createdAt: Date
  ) {
    this.validateEmail(email);
  }

  private validateEmail(email: string): void {
    if (!email || email.trim().length === 0) {
      throw new Error('Email cannot be empty');
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throw new Error('Invalid email format');
    }
  }

  static create(userData: UserData): User {
    return new User(
      '', // ID will be generated by repository
      userData.email,
      userData.name,
      userData.picture,
      userData.lastLoginAt,
      new Date()
    );
  }

  updateLastLogin(): User {
    return new User(
      this.id,
      this.email,
      this.name,
      this.picture,
      new Date(),
      this.createdAt
    );
  }
} 